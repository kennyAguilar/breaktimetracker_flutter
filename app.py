from flask import Flask, render_template, request, redirect, url_for, session, jsonify, send_file
from supabase import create_client, Client
import pytz
from datetime import datetime, timedelta, date
import os
from dotenv import load_dotenv
import csv
import io
import traceback
from functools import wraps

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n Flask
app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY', 'dev-secret-key-change-in-production')
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=30)

# Estado de conexi√≥n global para mostrar en la interfaz
conexion_supabase_status = {
    'conectado': False,
    'mensaje': '',
    'detalle': ''
}

# Cliente Supabase
try:
    print("Iniciando conexi√≥n a Supabase...")
    
    # Verificar variables de entorno
    supabase_url = os.getenv('SUPABASE_URL')
    supabase_anon_key = os.getenv('SUPABASE_ANON_KEY')
    supabase_service_key = os.getenv('SUPABASE_SERVICE_KEY')
    
    print(f"SUPABASE_URL: {'CONFIGURADA' if supabase_url else 'NO ENCONTRADA'}")
    print(f"SUPABASE_ANON_KEY: {'CONFIGURADA' if supabase_anon_key else 'NO ENCONTRADA'}")
    print(f"SUPABASE_SERVICE_KEY: {'CONFIGURADA' if supabase_service_key else 'NO ENCONTRADA'}")
    
    if not supabase_url or not supabase_anon_key or not supabase_service_key:
        conexion_supabase_status.update({
            'conectado': False,
            'mensaje': 'Error: Variables de entorno faltantes',
            'detalle': 'Verifica el archivo .env'
        })
        print("‚ùå Error: Variables de entorno de Supabase no est√°n configuradas")
        print("Verifica que el archivo .env contenga:")
        print("SUPABASE_URL=https://tu-proyecto.supabase.co")
        print("SUPABASE_ANON_KEY=tu-anon-key")
        print("SUPABASE_SERVICE_KEY=tu-service-key")
        exit(1)
    
    # Intentar crear clientes con configuraci√≥n espec√≠fica para producci√≥n
    print("üîó Creando cliente p√∫blico...")
    try:
        # Configuraci√≥n espec√≠fica para evitar problemas de proxy
        from supabase import ClientOptions
        options = ClientOptions()
        supabase: Client = create_client(supabase_url, supabase_anon_key, options)
    except Exception as client_error:
        print(f"‚ö†Ô∏è Error con opciones espec√≠ficas, intentando configuraci√≥n b√°sica: {client_error}")
        # Fallback a configuraci√≥n b√°sica
        supabase: Client = create_client(supabase_url, supabase_anon_key)
    
    print("üîó Creando cliente administrativo...")
    try:
        from supabase import ClientOptions
        options_admin = ClientOptions()
        supabase_admin: Client = create_client(supabase_url, supabase_service_key, options_admin)
    except Exception as admin_error:
        print(f"‚ö†Ô∏è Error con opciones espec√≠ficas para admin, intentando configuraci√≥n b√°sica: {admin_error}")
        # Fallback a configuraci√≥n b√°sica
        supabase_admin: Client = create_client(supabase_url, supabase_service_key)
    
    # Probar conexi√≥n b√°sica
    print("üß™ Probando conexi√≥n...")
    test_response = supabase.table('usuarios').select("id").limit(1).execute()
    print(f"‚úÖ Conexi√≥n exitosa - Respuesta: {len(test_response.data) if test_response.data else 0} registros")
    
    conexion_supabase_status.update({
        'conectado': True,
        'mensaje': 'Conexi√≥n establecida correctamente',
        'detalle': f'Usuarios en BD: {len(test_response.data) if test_response.data else 0}'
    })
    
    print("‚úÖ Conexi√≥n a Supabase establecida correctamente")
    
except Exception as e:
    conexion_supabase_status.update({
        'conectado': False,
        'mensaje': f'Error de conexi√≥n: {str(e)}',
        'detalle': f'Tipo: {type(e).__name__}'
    })
    
    print(f"‚ùå Error detallado conectando a Supabase:")
    print(f"   Tipo de error: {type(e).__name__}")
    print(f"   Mensaje: {str(e)}")
    
    import traceback
    print(f"   Stack trace: {traceback.format_exc()}")
    
    print("\nüîß Posibles soluciones:")
    print("1. Verificar que el archivo .env existe y contiene las variables correctas")
    print("2. Verificar que las credenciales de Supabase son v√°lidas")
    print("3. Verificar conexi√≥n a internet")
    print("4. Verificar que las tablas existen en Supabase")
    
    exit(1)

# Zona horaria
tz = pytz.timezone('America/Punta_Arenas')

# Decorador para rutas protegidas
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'admin_id' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

# Funci√≥n auxiliar para obtener hora actual en Punta Arenas
def get_current_time():
    return datetime.now(tz)

# Funci√≥n auxiliar para cerrar un descanso
def cerrar_descanso_usuario(usuario_id, descanso_activo):
    """
    Funci√≥n dedicada para cerrar un descanso de usuario
    Retorna: (success: bool, mensaje: str, detalle: dict)
    """
    try:
        print(f"üîÑ Iniciando proceso de cierre para usuario ID: {usuario_id}")
        print(f"   Descanso a cerrar: ID {descanso_activo['id']}")
        
        # Calcular duraci√≥n
        inicio = datetime.fromisoformat(descanso_activo['inicio'].replace('Z', '+00:00'))
        if inicio.tzinfo is None:
            inicio = inicio.replace(tzinfo=pytz.UTC)
        
        fin = datetime.now(pytz.UTC)  # Usar UTC para consistencia
        duracion_minutos = max(1, int((fin - inicio).total_seconds() / 60))  # M√≠nimo 1 minuto
        tipo = 'COMIDA' if duracion_minutos >= 30 else 'DESCANSO'
        
        print(f"   Duraci√≥n: {duracion_minutos} min ‚Üí {tipo}")
        
        # Preparar datos para tiempos_descanso
        tiempo_data = {
            'usuario_id': usuario_id,
            'tipo': tipo,
            'fecha': inicio.date().isoformat(),
            'inicio': inicio.time().isoformat(),
            'fin': fin.time().isoformat(),
            'duracion_minutos': duracion_minutos
        }
        
        # Paso 1: Insertar en tiempos_descanso
        print(f"   üìù Insertando tiempo de descanso...")
        insert_response = supabase_admin.table('tiempos_descanso').insert(tiempo_data).execute()
        
        if not insert_response.data:
            error_msg = "Error insertando en tiempos_descanso"
            print(f"   ‚ùå {error_msg}")
            return False, error_msg, {'insert_response': insert_response}
        
        tiempo_id = insert_response.data[0]['id']
        print(f"   ‚úÖ Tiempo insertado con ID: {tiempo_id}")
        
        # Paso 2: Eliminar de descansos
        print(f"   üóëÔ∏è Eliminando descanso activo...")
        delete_response = supabase_admin.table('descansos').delete().eq('id', descanso_activo['id']).execute()
        
        if delete_response.data:
            print(f"   ‚úÖ Descanso eliminado: {len(delete_response.data)} registros")
        else:
            print(f"   ‚ö†Ô∏è ADVERTENCIA: No se confirm√≥ eliminaci√≥n - Error: {delete_response.error if hasattr(delete_response, 'error') else 'Sin error'}")

        # Paso 3: Verificaci√≥n final
        verify_response = supabase_admin.table('descansos').select("*").eq('usuario_id', usuario_id).execute()
        descansos_restantes = len(verify_response.data)
        print(f"   üîç Verificaci√≥n: {descansos_restantes} descansos activos restantes")
        
        if descansos_restantes > 0:
            print(f"   ‚ö†Ô∏è PROBLEMA: Quedan descansos activos")
            for resto in verify_response.data:
                print(f"      - ID {resto['id']}, Inicio: {resto['inicio']}")
        
        success_msg = f"Descanso cerrado: {tipo} de {duracion_minutos} min"
        print(f"   ‚úÖ √âXITO: {success_msg}")
        
        return True, success_msg, {
            'tiempo_id': tiempo_id,
            'tipo': tipo,
            'duracion_minutos': duracion_minutos,
            'descansos_restantes': descansos_restantes
        }
        
    except Exception as e:
        error_msg = f"Error cerrando descanso: {str(e)}"
        print(f"   ‚ùå ERROR CR√çTICO: {error_msg}")
        import traceback
        print(f"   Stack trace: {traceback.format_exc()}")
        return False, error_msg, {'exception': str(e)}

# Funci√≥n auxiliar para obtener hora actual en Punta Arenas (duplicada, eliminamos esta l√≠nea)
# def get_current_time():
#     return datetime.now(tz)

# Ruta principal - Lector de tarjetas
@app.route('/', methods=['GET', 'POST'])
def index():
    # TEMPORALMENTE COMENTADO: Si hay admin logueado, redirigir a registros
    # if 'admin_id' in session:
    #     return redirect(url_for('registros'))
    
    mensaje = None
    tipo_mensaje = None
    
    if request.method == 'POST':
        entrada = request.form.get('entrada', '').strip()
        
        if entrada:
            print(f"üîç Buscando usuario con entrada: '{entrada}'")
            try:
                # Buscar usuario por tarjeta
                response = supabase.table('usuarios').select("*").eq('tarjeta', entrada).execute()
                usuario = response.data[0] if response.data else None
                print(f"üÜî B√∫squeda por tarjeta: {len(response.data)} resultados")
                
                # Si no se encuentra por tarjeta, buscar por c√≥digo
                if not usuario:
                    response = supabase.table('usuarios').select("*").eq('codigo', entrada.upper()).execute()
                    usuario = response.data[0] if response.data else None
                    print(f"üî§ B√∫squeda por c√≥digo: {len(response.data)} resultados")
                
                if usuario:
                    print(f"üë§ Usuario encontrado: {usuario['nombre']} (ID: {usuario['id']})")
                    
                    # Verificar si tiene descanso activo
                    response = supabase.table('descansos').select("*").eq('usuario_id', usuario['id']).execute()
                    descanso_activo = response.data[0] if response.data else None
                    
                    print(f"üîç Descansos encontrados: {len(response.data)}")
                    if descanso_activo:
                        print(f"‚è∞ Descanso activo encontrado: ID {descanso_activo['id']}, Inicio: {descanso_activo['inicio']}")
                    
                    if descanso_activo:
                        print(f"üö™ PROCESANDO SALIDA DE DESCANSO")
                        print(f"   Usuario: {usuario['nombre']} (ID: {usuario['id']})")
                        print(f"   Descanso ID: {descanso_activo['id']}")
                        
                        # Usar funci√≥n helper para cerrar descanso
                        success, resultado_msg, detalle = cerrar_descanso_usuario(usuario['id'], descanso_activo)
                        
                        if success:
                            mensaje = f"{usuario['nombre']} - Salida registrada ({resultado_msg})"
                            tipo_mensaje = "salida"
                            print(f"üéâ SALIDA PROCESADA EXITOSAMENTE: {resultado_msg}")
                        else:
                            mensaje = f"Error al registrar salida de {usuario['nombre']}: {resultado_msg}"
                            tipo_mensaje = "error"
                            print(f"‚ùå FALLO EN SALIDA: {resultado_msg}")
                            print(f"   Detalles: {detalle}")
                            
                    else:
                        # Registrar entrada a descanso
                        try:
                            insert_response = supabase_admin.table('descansos').insert({
                                'usuario_id': usuario['id'],
                                'inicio': datetime.now(pytz.UTC).isoformat(),
                                'tipo': 'Pendiente'
                            }).execute()
                            
                            print(f"‚úÖ Entrada registrada: {insert_response.data}")
                            mensaje = f"{usuario['nombre']} - Entrada a descanso registrada"
                            tipo_mensaje = "entrada"
                            
                        except Exception as e:
                            print(f"‚ùå Error registrando entrada: {e}")
                            mensaje = f"Error al registrar entrada: {str(e)}"
                            tipo_mensaje = "error"
                else:
                    mensaje = "Usuario no encontrado"
                    tipo_mensaje = "error"
                    
            except Exception as e:
                mensaje = f"Error al procesar: {str(e)}"
                tipo_mensaje = "error"
    
    # Obtener usuarios en descanso con informaci√≥n de usuario
    usuarios_en_descanso = []
    try:
        print(f"\nüîç === OBTENIENDO USUARIOS EN DESCANSO ===")
        
        # Primero obtener todos los descansos activos
        print(f"üìä Consultando tabla 'descansos'...")
        response = supabase.table('descansos').select("*").execute()
        descansos_activos = response.data
        
        print(f"üìä Descansos activos encontrados: {len(descansos_activos)}")
        
        if len(descansos_activos) == 0:
            print(f"‚ÑπÔ∏è No hay descansos activos en la tabla 'descansos'")
        else:
            print(f"üìã Lista de descansos activos:")
            for i, d in enumerate(descansos_activos):
                print(f"   {i+1}. ID: {d['id']}, Usuario ID: {d['usuario_id']}, Inicio: {d['inicio']}")
        
        # Procesar cada descanso activo
        for i, d in enumerate(descansos_activos):
            print(f"\nüë§ Procesando descanso {i+1}/{len(descansos_activos)}:")
            print(f"   Descanso ID: {d['id']}")
            print(f"   Usuario ID: {d['usuario_id']}")
            print(f"   Inicio: {d['inicio']}")
            
            try:
                # Obtener informaci√≥n del usuario para cada descanso
                print(f"   üîç Buscando informaci√≥n del usuario ID {d['usuario_id']}...")
                user_response = supabase.table('usuarios').select("nombre, codigo").eq('id', d['usuario_id']).execute()
                
                print(f"   üìä Respuesta de usuario: {len(user_response.data)} registros encontrados")
                
                if user_response.data:
                    usuario_info = user_response.data[0]
                    print(f"   ‚úÖ Usuario encontrado: {usuario_info['nombre']} (C√≥digo: {usuario_info['codigo']})")
                    
                    # Calcular tiempo transcurrido
                    try:
                        inicio = datetime.fromisoformat(d['inicio'].replace('Z', '+00:00'))
                        if inicio.tzinfo is None:
                            inicio = inicio.replace(tzinfo=pytz.UTC)
                        
                        ahora = datetime.now(pytz.UTC)  # Usar UTC para consistencia
                        tiempo_transcurrido = int((ahora - inicio).total_seconds() / 60)
                        
                        print(f"   ‚è∞ Tiempo transcurrido: {tiempo_transcurrido} minutos")
                        print(f"      Inicio: {inicio.strftime('%H:%M:%S UTC')}")
                        print(f"      Ahora: {ahora.strftime('%H:%M:%S UTC')}")
                        
                        # Determinar tiempo m√°ximo seg√∫n el tiempo transcurrido
                        tiempo_maximo = 40 if tiempo_transcurrido >= 20 else 20
                        tiempo_restante = max(0, tiempo_maximo - tiempo_transcurrido)
                        tipo_probable = 'COMIDA' if tiempo_transcurrido >= 20 else 'DESCANSO'
                        
                        # Asegurar que los valores sean n√∫meros v√°lidos
                        tiempo_transcurrido = max(0, tiempo_transcurrido)
                        tiempo_restante = max(0, tiempo_restante)
                        
                        print(f"   üìã Tipo probable: {tipo_probable}")
                        print(f"   ‚è≥ Tiempo restante: {tiempo_restante} min")
                        
                        usuario_descanso = {
                            'nombre': usuario_info['nombre'],
                            'codigo': usuario_info['codigo'],
                            'tiempo_transcurrido': tiempo_transcurrido,
                            'tiempo_restante': tiempo_restante,
                            'tipo_probable': tipo_probable,
                            'inicio_formateado': inicio.astimezone(tz).strftime('%H:%M'),  # Para mostrar
                            'inicio_iso': inicio.isoformat()  # Para c√°lculos de JavaScript
                        }
                        
                        usuarios_en_descanso.append(usuario_descanso)
                        print(f"   ‚úÖ Usuario agregado a la lista de descansos")
                        
                    except Exception as e_tiempo:
                        print(f"   ‚ùå Error calculando tiempo para usuario {usuario_info['nombre']}: {e_tiempo}")
                        
                else:
                    print(f"   ‚ö†Ô∏è PROBLEMA: No se encontr√≥ informaci√≥n para usuario ID {d['usuario_id']}")
                    print(f"      Esto podr√≠a indicar que el usuario fue eliminado pero tiene descansos activos")
                    
            except Exception as e_usuario:
                print(f"   ‚ùå Error procesando descanso individual (ID: {d['id']}): {e_usuario}")
                import traceback
                print(f"   Stack trace: {traceback.format_exc()}")
        
        print(f"\nüìä RESUMEN FINAL:")
        print(f"   Total descansos activos en BD: {len(descansos_activos)}")
        print(f"   Total usuarios procesados exitosamente: {len(usuarios_en_descanso)}")
        
        if len(usuarios_en_descanso) > 0:
            print(f"   üë• Usuarios en descanso para mostrar:")
            for u in usuarios_en_descanso:
                print(f"      - {u['nombre']} ({u['codigo']}) - {u['tiempo_transcurrido']} min")
        else:
            print(f"   ‚ÑπÔ∏è No hay usuarios en descanso para mostrar")
            
    except Exception as e:
        print(f"‚ùå ERROR CR√çTICO al obtener descansos: {e}")
        import traceback
        print(f"Stack trace completo: {traceback.format_exc()}")
        usuarios_en_descanso = []
    
    return render_template('index.html',
                         descansos=usuarios_en_descanso,
                         hora_actual=datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S'),
                         mensaje=mensaje,
                         tipo_mensaje=tipo_mensaje,
                         conexion_status=conexion_supabase_status)

# Login administrativo
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        usuario = request.form.get('usuario', '').strip()
        clave = request.form.get('clave', '').strip()
        
        print(f"üîê Intento de login:")
        print(f"   Usuario recibido: '{usuario}'")
        print(f"   Clave recibida: '{clave}'")
        
        try:
            # Buscar administrador usando cliente administrativo
            print(f"   Buscando administrador en BD...")
            response = supabase_admin.table('administradores').select("*").eq('usuario', usuario).eq('activo', True).execute()
            
            print(f"   Respuesta BD: {len(response.data) if response.data else 0} resultados")
            
            if response.data:
                admin = response.data[0]
                print(f"   Admin encontrado:")
                print(f"      ID: {admin['id']}")
                print(f"      Usuario: '{admin['usuario']}'")
                print(f"      Nombre: '{admin['nombre']}'")
                print(f"      Clave BD: '{admin['clave']}'")
                print(f"      Activo: {admin['activo']}")
                
                if admin['clave'] == clave:
                    print(f"   ‚úÖ Credenciales v√°lidas - Iniciando sesi√≥n")
                    session.permanent = True
                    session['admin_id'] = admin['id']
                    session['admin_nombre'] = admin['nombre']
                    session['last_activity'] = datetime.now().isoformat()
                    return redirect(url_for('registros'))
                else:
                    print(f"   ‚ùå Clave incorrecta: '{clave}' != '{admin['clave']}'")
                    return render_template('login.html', error=f'Credenciales inv√°lidas. Usuario: {usuario}, Clave esperada: {admin["clave"]}')
            else:
                print(f"   ‚ùå Usuario no encontrado o inactivo")
                return render_template('login.html', error=f'Usuario "{usuario}" no encontrado o inactivo')
                
        except Exception as e:
            print(f"   ‚ùå Error en login: {e}")
            import traceback
            print(f"   Stack trace: {traceback.format_exc()}")
            return render_template('login.html', error=f'Error al verificar credenciales: {str(e)}')
    
    return render_template('login.html')

# Logout
@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('index'))

# Gesti√≥n de base de datos (usuarios)
@app.route('/base_datos', methods=['GET', 'POST'])
@login_required
def base_datos():
    mensaje = None
    tipo_mensaje = None
    
    if request.method == 'POST':
        action = request.form.get('action')
        
        try:
            if action == 'add':
                # Agregar nuevo usuario
                nombre = request.form.get('nombre', '').strip()
                tarjeta = request.form.get('tarjeta', '').strip()
                turno = request.form.get('turno', '').strip()
                codigo = request.form.get('codigo', '').strip().upper()
                
                print(f"üîç Creando usuario - Action: {action}")
                print(f"   Nombre: '{nombre}', Tarjeta: '{tarjeta}', Turno: '{turno}', C√≥digo: '{codigo}'")
                
                if nombre and tarjeta and turno and codigo:
                    # Verificar si el c√≥digo ya existe
                    existing = supabase.table('usuarios').select("id").eq('codigo', codigo).execute()
                    if existing.data:
                        mensaje = f"Ya existe un usuario con el c√≥digo {codigo}"
                        tipo_mensaje = "error"
                    else:
                        # DEBUG: Imprimir valores exactos antes de crear
                        print(f"üîç VALORES EXACTOS A INSERTAR:")
                        print(f"   nombre: '{nombre}' (tipo: {type(nombre)})")
                        print(f"   tarjeta: '{tarjeta}' (tipo: {type(tarjeta)})")
                        print(f"   turno: '{turno}' (tipo: {type(turno)})")
                        print(f"   codigo: '{codigo}' (tipo: {type(codigo)})")
                        
                        # Crear usuario
                        try:
                            result = supabase_admin.table('usuarios').insert({
                                'nombre': nombre,
                                'tarjeta': tarjeta,
                                'turno': turno,
                                'codigo': codigo
                            }).execute()
                            
                            print(f"‚úÖ Usuario creado exitosamente: {result}")
                            mensaje = f"Usuario {nombre} creado exitosamente"
                            tipo_mensaje = "success"
                            
                        except Exception as create_error:
                            print(f"‚ùå ERROR ESPEC√çFICO AL CREAR: {create_error}")
                            if "usuarios_turno_check" in str(create_error):
                                # Error de restricci√≥n de turno - la BD deber√≠a estar corregida
                                mensaje = f"Error de restricci√≥n de turno: '{turno}' no est√° permitido. Valores v√°lidos: 'Full', 'Part Time', 'Llamado'"
                                print("‚ö†Ô∏è Error de restricci√≥n - revisar que la BD est√© actualizada")
                            else:
                                mensaje = f"Error al crear usuario: {str(create_error)}"
                            tipo_mensaje = "error"
                else:
                    mensaje = "Todos los campos son obligatorios"
                    tipo_mensaje = "error"
                    print(f"‚ùå Campos faltantes - Nombre: {bool(nombre)}, Tarjeta: {bool(tarjeta)}, Turno: {bool(turno)}, C√≥digo: {bool(codigo)}")
                    
            elif action == 'delete':
                # Eliminar usuario
                user_id = request.form.get('user_id')
                print(f"üóëÔ∏è Eliminando usuario ID: {user_id}")
                
                if user_id:
                    # Obtener nombre del usuario antes de eliminar
                    user_info = supabase.table('usuarios').select("nombre").eq('id', user_id).execute()
                    nombre_usuario = user_info.data[0]['nombre'] if user_info.data else "Usuario"
                    
                    # Eliminar usuario
                    result = supabase_admin.table('usuarios').delete().eq('id', user_id).execute()
                    print(f"‚úÖ Usuario eliminado: {result}")
                    mensaje = f"Usuario {nombre_usuario} eliminado exitosamente"
                    tipo_mensaje = "success"
                else:
                    mensaje = "ID de usuario no v√°lido"
                    tipo_mensaje = "error"
            else:
                mensaje = "Acci√≥n no v√°lida"
                tipo_mensaje = "error"
                print(f"‚ùå Acci√≥n no reconocida: '{action}'")
                    
        except Exception as e:
            print(f"‚ùå Error en base_datos: {e}")
            mensaje = f"Error: {str(e)}"
            tipo_mensaje = "error"
    
    # Obtener todos los usuarios
    try:
        response = supabase.table('usuarios').select("*").order('nombre').execute()
        usuarios = response.data
        print(f"üìä Usuarios obtenidos: {len(usuarios)}")
    except Exception as e:
        usuarios = []
        print(f"‚ùå Error al obtener usuarios: {e}")
        if not mensaje:  # Solo mostrar este error si no hay otro mensaje
            mensaje = "Error al cargar la lista de usuarios"
            tipo_mensaje = "error"
    
    return render_template('base_datos.html', usuarios=usuarios, mensaje=mensaje, tipo_mensaje=tipo_mensaje)

# Editar usuario
@app.route('/editar_usuario/<user_id>', methods=['GET', 'POST'])
@login_required
def editar_usuario(user_id):
    mensaje = None
    tipo_mensaje = None
    
    if request.method == 'POST':
        try:
            # Actualizar usuario
            nombre = request.form.get('nombre', '').strip()
            tarjeta = request.form.get('tarjeta', '').strip()
            turno = request.form.get('turno', '').strip()
            codigo = request.form.get('codigo', '').strip().upper()
            
            print(f"üîÑ Actualizando usuario ID: {user_id}")
            print(f"   Nuevos valores - Nombre: '{nombre}', Tarjeta: '{tarjeta}', Turno: '{turno}', C√≥digo: '{codigo}'")
            
            if nombre and tarjeta and turno and codigo:
                try:
                    result = supabase_admin.table('usuarios').update({
                        'nombre': nombre,
                        'tarjeta': tarjeta,
                        'turno': turno,
                        'codigo': codigo
                    }).eq('id', user_id).execute()
                    
                    print(f"‚úÖ Usuario actualizado exitosamente: {result}")
                    return redirect(url_for('base_datos'))
                    
                except Exception as update_error:
                    print(f"‚ùå ERROR AL ACTUALIZAR: {update_error}")
                    if "usuarios_turno_check" in str(update_error):
                        mensaje = f"""
                        ERROR DE RESTRICCI√ìN DE BASE DE DATOS
                        
                        El turno '{turno}' no est√° permitido por la restricci√≥n de la base de datos.
                        
                        SOLUCI√ìN: Ejecuta estos comandos en Supabase SQL Editor:
                        
                        ALTER TABLE usuarios DROP CONSTRAINT IF EXISTS usuarios_turno_check;
                        ALTER TABLE usuarios ADD CONSTRAINT usuarios_turno_check CHECK (turno IN ('Full', 'Part Time', 'Llamado'));
                        """
                    else:
                        mensaje = f"Error al actualizar usuario: {str(update_error)}"
                    tipo_mensaje = "error"
            else:
                mensaje = "Todos los campos son obligatorios"
                tipo_mensaje = "error"
                
        except Exception as e:
            print(f"Error general al actualizar usuario: {e}")
            mensaje = f"Error: {str(e)}"
            tipo_mensaje = "error"
    
    # Obtener usuario
    try:
        response = supabase.table('usuarios').select("*").eq('id', user_id).execute()
        usuario = response.data[0] if response.data else None
        
        if not usuario:
            return redirect(url_for('base_datos'))
            
        return render_template('editar_usuario.html', usuario=usuario, mensaje=mensaje, tipo_mensaje=tipo_mensaje)
    except Exception as e:
        print(f"Error al obtener usuario: {e}")
        return redirect(url_for('base_datos'))

# Ver registros
@app.route('/registros')
@login_required
def registros():
    # Obtener par√°metros de filtro
    fecha_inicio = request.args.get('fecha_inicio', '')
    fecha_fin = request.args.get('fecha_fin', '')
    usuario_id = request.args.get('usuario_id', '')
    
    # Si no hay fechas, usar √∫ltimos 7 d√≠as
    if not fecha_inicio:
        fecha_inicio = (date.today() - timedelta(days=7)).isoformat()
    if not fecha_fin:
        fecha_fin = date.today().isoformat()
    
    try:
        # Construir query
        query = supabase.table('tiempos_descanso').select("*, usuarios(nombre, codigo)")
        
        # Aplicar filtros
        query = query.gte('fecha', fecha_inicio).lte('fecha', fecha_fin)
        
        if usuario_id:
            query = query.eq('usuario_id', usuario_id)
        
        # Ejecutar query
        response = query.order('fecha', desc=True).order('inicio', desc=True).execute()
        registros = response.data
        
        # Formatear registros para mostrar
        for r in registros:
            r['fecha_formateada'] = datetime.fromisoformat(r['fecha']).strftime('%d/%m/%Y')
            r['duracion_formateada'] = f"{r['duracion_minutos']} min"
        
        # Obtener lista de usuarios para el filtro
        response_usuarios = supabase.table('usuarios').select("id, nombre").order('nombre').execute()
        usuarios = response_usuarios.data
        
        # Calcular estad√≠sticas b√°sicas
        total_registros = len(registros)
        total_descansos = len([r for r in registros if r['tipo'] == 'DESCANSO'])
        total_comidas = len([r for r in registros if r['tipo'] == 'COMIDA'])
        tiempo_total = sum(r['duracion_minutos'] for r in registros)
        
        estadisticas = {
            'total_registros': total_registros,
            'total_descansos': total_descansos,
            'total_comidas': total_comidas,
            'tiempo_total': tiempo_total,
            'promedio_duracion': round(tiempo_total / total_registros, 1) if total_registros > 0 else 0
        }
        
    except Exception as e:
        print(f"Error al obtener registros: {e}")
        registros = []
        usuarios = []
        estadisticas = {
            'total_registros': 0,
            'total_descansos': 0,
            'total_comidas': 0,
            'tiempo_total': 0,
            'promedio_duracion': 0
        }
    
    return render_template('registros.html',
                         registros=registros,
                         usuarios=usuarios,
                         fecha_inicio=fecha_inicio,
                         fecha_fin=fecha_fin,
                         usuario_id=usuario_id,
                         estadisticas=estadisticas,
                         filtros={})

# Reportes y estad√≠sticas
@app.route('/reportes')
@login_required
def reportes():
    # Obtener par√°metros
    fecha_inicio = request.args.get('fecha_inicio', '')
    fecha_fin = request.args.get('fecha_fin', '')
    
    # Si no hay fechas, usar √∫ltimo mes
    if not fecha_inicio:
        fecha_inicio = (date.today() - timedelta(days=30)).isoformat()
    if not fecha_fin:
        fecha_fin = date.today().isoformat()
    
    try:
        # Obtener todos los registros del per√≠odo con manejo de errores mejorado
        print(f"üîç Obteniendo reportes para per√≠odo: {fecha_inicio} a {fecha_fin}")
        
        response = supabase.table('tiempos_descanso').select("*, usuarios(nombre, codigo)")\
            .gte('fecha', fecha_inicio)\
            .lte('fecha', fecha_fin)\
            .execute()
        
        registros = response.data if response.data else []
        print(f"üìä Registros obtenidos: {len(registros)}")
        
        # Filtrar registros con datos v√°lidos
        registros_validos = []
        for r in registros:
            if r and r.get('usuarios') and r.get('usuarios', {}).get('nombre'):
                registros_validos.append(r)
            else:
                print(f"‚ö†Ô∏è Registro con datos incompletos ignorado: {r.get('id', 'ID desconocido')}")
        
        print(f"‚úÖ Registros v√°lidos para procesar: {len(registros_validos)}")
        registros = registros_validos
        
        # === ESTAD√çSTICAS DE HOY ===
        fecha_hoy = date.today().isoformat()
        registros_hoy = [r for r in registros if r['fecha'] == fecha_hoy]
        
        if registros_hoy:
            total_descansos_hoy = len([r for r in registros_hoy if r['tipo'] == 'DESCANSO'])
            total_comidas_hoy = len([r for r in registros_hoy if r['tipo'] == 'COMIDA'])
            total_minutos_hoy = sum(r['duracion_minutos'] for r in registros_hoy)
            minutos_descanso_hoy = sum(r['duracion_minutos'] for r in registros_hoy if r['tipo'] == 'DESCANSO')
            minutos_comida_hoy = sum(r['duracion_minutos'] for r in registros_hoy if r['tipo'] == 'COMIDA')
            
            stats_hoy = {
                'total_descansos': total_descansos_hoy + total_comidas_hoy,
                'total_minutos': total_minutos_hoy,
                'promedio_minutos': round(total_minutos_hoy / len(registros_hoy), 1) if registros_hoy else 0,
                'total_comidas': total_comidas_hoy,
                'total_descansos_cortos': total_descansos_hoy,
                'minutos_comida': minutos_comida_hoy,
                'minutos_descanso': minutos_descanso_hoy
            }
        else:
            stats_hoy = {
                'total_descansos': 0,
                'total_minutos': 0,
                'promedio_minutos': 0,
                'total_comidas': 0,
                'total_descansos_cortos': 0,
                'minutos_comida': 0,
                'minutos_descanso': 0
            }
        
        # === ESTAD√çSTICAS DE LA SEMANA ===
        fecha_inicio_semana = (date.today() - timedelta(days=7)).isoformat()
        registros_semana = [r for r in registros if r['fecha'] >= fecha_inicio_semana]
        
        if registros_semana:
            total_minutos_semana = sum(r['duracion_minutos'] for r in registros_semana)
            
            stats_semana = {
                'total_descansos': len(registros_semana),
                'total_minutos': total_minutos_semana,
                'promedio_minutos': round(total_minutos_semana / len(registros_semana), 1) if registros_semana else 0
            }
        else:
            stats_semana = {
                'total_descansos': 0,
                'total_minutos': 0,
                'promedio_minutos': 0
            }
        
        # Calcular estad√≠sticas generales (c√≥digo existente)
        stats_por_usuario = {}
        stats_por_dia = {}
        total_descansos = 0
        total_comidas = 0
        tiempo_total_descansos = 0
        tiempo_total_comidas = 0
        
        # Procesar registros con manejo de errores
        usuarios_info = {}  # Para almacenar info de usuarios
        
        for r in registros:
            try:
                usuario_data = r.get('usuarios', {})
                usuario_nombre = usuario_data.get('nombre', 'Usuario Desconocido') if usuario_data else 'Usuario Desconocido'
                usuario_codigo = usuario_data.get('codigo', 'N/A') if usuario_data else 'N/A'
                fecha = r.get('fecha', date.today().isoformat())
                tipo = r.get('tipo', 'DESCANSO')
                duracion = r.get('duracion_minutos', 0)
                
                # Almacenar info del usuario
                if usuario_nombre != 'Usuario Desconocido':
                    usuarios_info[usuario_nombre] = usuario_codigo
                
                # Validar datos
                if not usuario_nombre or usuario_nombre == 'Usuario Desconocido':
                    print(f"‚ö†Ô∏è Usuario sin nombre en registro ID: {r.get('id', 'desconocido')}")
                    continue
                
                if duracion <= 0:
                    print(f"‚ö†Ô∏è Duraci√≥n inv√°lida ({duracion}) en registro ID: {r.get('id', 'desconocido')}")
                    continue
                
                # Stats por usuario
                if usuario_nombre not in stats_por_usuario:
                    stats_por_usuario[usuario_nombre] = {
                        'descansos': 0,
                        'comidas': 0,
                        'tiempo_descansos': 0,
                        'tiempo_comidas': 0,
                        'tiempo_total': 0,
                        'exceso_total': 0  # Para calcular usuarios que m√°s se exceden
                    }
                
                # Stats por d√≠a
                if fecha not in stats_por_dia:
                    stats_por_dia[fecha] = {
                        'descansos': 0,
                        'comidas': 0,
                        'usuarios_unicos': set()
                    }
                
                # Calcular exceso
                exceso = 0
                if tipo == 'DESCANSO' and duracion > 20:
                    exceso = duracion - 20
                elif tipo == 'COMIDA' and duracion > 40:
                    exceso = duracion - 40
                
                # Actualizar contadores
                if tipo == 'DESCANSO':
                    stats_por_usuario[usuario_nombre]['descansos'] += 1
                    stats_por_usuario[usuario_nombre]['tiempo_descansos'] += duracion
                    stats_por_dia[fecha]['descansos'] += 1
                    total_descansos += 1
                    tiempo_total_descansos += duracion
                else:
                    stats_por_usuario[usuario_nombre]['comidas'] += 1
                    stats_por_usuario[usuario_nombre]['tiempo_comidas'] += duracion
                    stats_por_dia[fecha]['comidas'] += 1
                    total_comidas += 1
                    tiempo_total_comidas += duracion
                
                stats_por_usuario[usuario_nombre]['tiempo_total'] += duracion
                stats_por_usuario[usuario_nombre]['exceso_total'] += exceso
                stats_por_dia[fecha]['usuarios_unicos'].add(usuario_nombre)
                
            except Exception as e_registro:
                print(f"‚ùå Error procesando registro ID {r.get('id', 'desconocido')}: {e_registro}")
                continue
        
        # Convertir sets a conteos
        for fecha in stats_por_dia:
            stats_por_dia[fecha]['usuarios_unicos'] = len(stats_por_dia[fecha]['usuarios_unicos'])
        
        # Ordenar usuarios por tiempo total (top 10)
        top_usuarios = sorted(stats_por_usuario.items(), 
                            key=lambda x: x[1]['exceso_total'], 
                            reverse=True)[:10]
        
        # Formatear top usuarios para el template
        top_usuarios_formateado = []
        for i, (nombre, stats) in enumerate(top_usuarios):
            if stats['exceso_total'] > 0:  # Solo mostrar usuarios con exceso
                codigo_usuario = usuarios_info.get(nombre, nombre[:3].upper())
                top_usuarios_formateado.append({
                    'posicion': i + 1,
                    'nombre': nombre,
                    'codigo': codigo_usuario,
                    'total_descansos': stats['descansos'] + stats['comidas'],
                    'total_comidas': stats['comidas'],
                    'total_descansos_cortos': stats['descansos'],
                    'total_minutos': stats['tiempo_total'],  # ‚Üê Esta es la clave que falta
                    'tiempo_total': stats['tiempo_total'],
                    'exceso_total': stats['exceso_total'],
                    'exceso_comidas': max(0, stats['tiempo_comidas'] - (stats['comidas'] * 40)) if stats['comidas'] > 0 else 0,
                    'comidas_con_exceso': len([c for c in range(stats['comidas']) if (stats['tiempo_comidas'] / stats['comidas']) > 40]) if stats['comidas'] > 0 else 0,
                    'exceso_descansos': max(0, stats['tiempo_descansos'] - (stats['descansos'] * 20)) if stats['descansos'] > 0 else 0,
                    'descansos_con_exceso': len([d for d in range(stats['descansos']) if (stats['tiempo_descansos'] / stats['descansos']) > 20]) if stats['descansos'] > 0 else 0
                })
        
        # Preparar datos para gr√°ficos
        fechas_ordenadas = sorted(stats_por_dia.keys())
        datos_grafico = {
            'fechas': [datetime.fromisoformat(f).strftime('%d/%m') for f in fechas_ordenadas],
            'descansos': [stats_por_dia[f]['descansos'] for f in fechas_ordenadas],
            'comidas': [stats_por_dia[f]['comidas'] for f in fechas_ordenadas]
        }
        
        # Estad√≠sticas generales
        estadisticas = {
            'total_descansos': total_descansos,
            'total_comidas': total_comidas,
            'tiempo_total_descansos': tiempo_total_descansos,
            'tiempo_total_comidas': tiempo_total_comidas,
            'promedio_descanso': round(tiempo_total_descansos / total_descansos, 1) if total_descansos > 0 else 0,
            'promedio_comida': round(tiempo_total_comidas / total_comidas, 1) if total_comidas > 0 else 0
        }
        
    except Exception as e:
        print(f"‚ùå Error detallado al generar reportes: {e}")
        print(f"üìä Tipo de error: {type(e).__name__}")
        print(f"üìç Stack trace: {traceback.format_exc()}")
        
        # Valores por defecto en caso de error
        stats_hoy = {
            'total_descansos': 0,
            'total_minutos': 0,
            'promedio_minutos': 0,
            'total_comidas': 0,
            'total_descansos_cortos': 0,
            'minutos_comida': 0,
            'minutos_descanso': 0
        }
        stats_semana = {
            'total_descansos': 0,
            'total_minutos': 0,
            'promedio_minutos': 0
        }
        estadisticas = {
            'total_descansos': 0,
            'total_comidas': 0,
            'tiempo_total_descansos': 0,
            'tiempo_total_comidas': 0,
            'promedio_descanso': 0,
            'promedio_comida': 0
        }
        top_usuarios_formateado = []
        datos_grafico = {'fechas': [], 'descansos': [], 'comidas': []}
    
    return render_template('reportes.html',
                         estadisticas=estadisticas,
                         top_usuarios=top_usuarios_formateado,
                         stats_hoy=stats_hoy,
                         stats_semana=stats_semana,
                         fecha_hoy=date.today().strftime('%d/%m/%Y'),
                         datos_grafico=datos_grafico,
                         fecha_inicio=fecha_inicio,
                         fecha_fin=fecha_fin)

# Versi√≥n simplificada de reportes para debugging
@app.route('/reportes_simple')
@login_required
def reportes_simple():
    """Versi√≥n simplificada de reportes para identificar problemas"""
    fecha_inicio = request.args.get('fecha_inicio', (date.today() - timedelta(days=30)).isoformat())
    fecha_fin = request.args.get('fecha_fin', date.today().isoformat())
    
    try:
        print(f"üîç Reportes simple - Per√≠odo: {fecha_inicio} a {fecha_fin}")
        
        # Consulta b√°sica sin JOIN complicado
        response = supabase.table('tiempos_descanso').select("*")\
            .gte('fecha', fecha_inicio)\
            .lte('fecha', fecha_fin)\
            .execute()
        
        registros_raw = response.data or []
        print(f"üìä Registros obtenidos: {len(registros_raw)}")
        
        # Estad√≠sticas b√°sicas
        total_registros = len(registros_raw)
        total_descansos = len([r for r in registros_raw if r.get('tipo') == 'DESCANSO'])
        total_comidas = len([r for r in registros_raw if r.get('tipo') == 'COMIDA'])
        tiempo_total = sum(r.get('duracion_minutos', 0) for r in registros_raw)
        
        estadisticas = {
            'total_descansos': total_descansos,
            'total_comidas': total_comidas,
            'tiempo_total_descansos': sum(r.get('duracion_minutos', 0) for r in registros_raw if r.get('tipo') == 'DESCANSO'),
            'tiempo_total_comidas': sum(r.get('duracion_minutos', 0) for r in registros_raw if r.get('tipo') == 'COMIDA'),
            'promedio_descanso': 0,
            'promedio_comida': 0
        }
        
        # Calcular promedios
        if total_descansos > 0:
            estadisticas['promedio_descanso'] = round(estadisticas['tiempo_total_descansos'] / total_descansos, 1)
        if total_comidas > 0:
            estadisticas['promedio_comida'] = round(estadisticas['tiempo_total_comidas'] / total_comidas, 1)
        
        # Stats de hoy
        fecha_hoy = date.today().isoformat()
        registros_hoy = [r for r in registros_raw if r.get('fecha') == fecha_hoy]
        
        stats_hoy = {
            'total_descansos': len(registros_hoy),
            'total_minutos': sum(r.get('duracion_minutos', 0) for r in registros_hoy),
            'promedio_minutos': round(sum(r.get('duracion_minutos', 0) for r in registros_hoy) / len(registros_hoy), 1) if registros_hoy else 0,
            'total_comidas': len([r for r in registros_hoy if r.get('tipo') == 'COMIDA']),
            'total_descansos_cortos': len([r for r in registros_hoy if r.get('tipo') == 'DESCANSO']),
            'minutos_comida': sum(r.get('duracion_minutos', 0) for r in registros_hoy if r.get('tipo') == 'COMIDA'),
            'minutos_descanso': sum(r.get('duracion_minutos', 0) for r in registros_hoy if r.get('tipo') == 'DESCANSO')
        }
        
        # Stats de la semana
        fecha_inicio_semana = (date.today() - timedelta(days=7)).isoformat()
        registros_semana = [r for r in registros_raw if r.get('fecha', '') >= fecha_inicio_semana]
        
        stats_semana = {
            'total_descansos': len(registros_semana),
            'total_minutos': sum(r.get('duracion_minutos', 0) for r in registros_semana),
            'promedio_minutos': round(sum(r.get('duracion_minutos', 0) for r in registros_semana) / len(registros_semana), 1) if registros_semana else 0
        }
        
        # Datos de gr√°fico b√°sicos
        datos_grafico = {
            'fechas': ['√öltimos 7 d√≠as'],
            'descansos': [len([r for r in registros_semana if r.get('tipo') == 'DESCANSO'])],
            'comidas': [len([r for r in registros_semana if r.get('tipo') == 'COMIDA'])]
        }
        
        return render_template('reportes.html',
                             estadisticas=estadisticas,
                             top_usuarios=[],  # Vac√≠o por ahora
                             stats_hoy=stats_hoy,
                             stats_semana=stats_semana,
                             fecha_hoy=date.today().strftime('%d/%m/%Y'),
                             datos_grafico=datos_grafico,
                             fecha_inicio=fecha_inicio,
                             fecha_fin=fecha_fin)
        
    except Exception as e:
        print(f"‚ùå Error en reportes simple: {e}")
        print(f"üìç Stack trace: {traceback.format_exc()}")
        return render_template('error.html', error=f'Error en reportes: {str(e)}')

# Exportar a CSV - Versi√≥n mejorada
@app.route('/exportar_csv')
@login_required
def exportar_csv():
    fecha_inicio = request.args.get('fecha_inicio', (date.today() - timedelta(days=30)).isoformat())
    fecha_fin = request.args.get('fecha_fin', date.today().isoformat())
    tipo_reporte = request.args.get('tipo', 'completo')  # completo, resumen, estadisticas
    formato = request.args.get('formato', 'csv')  # csv, excel
    
    try:
        print(f"üìä Exportando {tipo_reporte} en formato {formato} para per√≠odo: {fecha_inicio} a {fecha_fin}")
        
        if tipo_reporte == 'estadisticas':
            return exportar_estadisticas_csv(fecha_inicio, fecha_fin, formato)
        elif tipo_reporte == 'resumen':
            return exportar_resumen_csv(fecha_inicio, fecha_fin, formato)
        else:
            return exportar_completo_csv(fecha_inicio, fecha_fin, formato)
            
    except Exception as e:
        print(f"‚ùå Error al exportar CSV: {e}")
        print(f"üìç Stack trace: {traceback.format_exc()}")
        return redirect(url_for('registros'))

def exportar_completo_csv(fecha_inicio, fecha_fin, formato='csv'):
    """Exportar todos los registros detallados"""
    try:
        # Obtener registros con manejo robusto de errores
        response = supabase.table('tiempos_descanso').select("*, usuarios(nombre, codigo, turno)")\
            .gte('fecha', fecha_inicio)\
            .lte('fecha', fecha_fin)\
            .order('fecha', desc=True)\
            .order('inicio', desc=True)\
            .execute()
        
        registros = response.data or []
        print(f"üìä Registros obtenidos para exportaci√≥n: {len(registros)}")
        
        # Crear CSV en memoria
        output = io.StringIO()
        writer = csv.writer(output, delimiter=';', quotechar='"')
        
        # Encabezados mejorados
        writer.writerow([
            'Fecha',
            'D√≠a de la Semana', 
            'Nombre Completo',
            'C√≥digo',
            'Turno',
            'Tipo de Descanso',
            'Hora Entrada',
            'Hora Salida',
            'Duraci√≥n (minutos)',
            'Duraci√≥n (horas)',
            'Exceso (minutos)',
            'Estado',
            'Observaciones'
        ])
        
        # Datos con informaci√≥n enriquecida
        for r in registros:
            try:
                fecha_obj = datetime.fromisoformat(r['fecha'])
                usuario_data = r.get('usuarios', {})
                duracion = r.get('duracion_minutos', 0)
                tipo = r.get('tipo', 'DESCANSO')
                
                # Calcular exceso
                limite = 40 if tipo == 'COMIDA' else 20
                exceso = max(0, duracion - limite)
                
                # Determinar estado
                if exceso > 30:
                    estado = 'EXCESO ALTO'
                elif exceso > 0:
                    estado = 'CON EXCESO'
                else:
                    estado = 'NORMAL'
                
                # Observaciones
                observaciones = []
                if exceso > 0:
                    observaciones.append(f'Excedi√≥ {exceso} min del l√≠mite')
                if duracion < 5:
                    observaciones.append('Duraci√≥n muy corta')
                
                writer.writerow([
                    fecha_obj.strftime('%d/%m/%Y'),
                    fecha_obj.strftime('%A').capitalize(),
                    usuario_data.get('nombre', 'Usuario Desconocido'),
                    usuario_data.get('codigo', 'N/A'),
                    usuario_data.get('turno', 'N/A'),
                    tipo,
                    r.get('inicio', 'N/A'),
                    r.get('fin', 'N/A'),
                    duracion,
                    round(duracion / 60, 2),
                    exceso,
                    estado,
                    '; '.join(observaciones) if observaciones else 'Sin observaciones'
                ])
                
            except Exception as e_row:
                print(f"‚ö†Ô∏è Error procesando registro ID {r.get('id', 'desconocido')}: {e_row}")
                continue
        
        # Preparar respuesta
        output.seek(0)
        filename = f'descansos_completo_{fecha_inicio}_{fecha_fin}.csv'
        
        return send_file(
            io.BytesIO(output.getvalue().encode('utf-8-sig')),  # UTF-8 con BOM para Excel
            mimetype='text/csv; charset=utf-8',
            as_attachment=True,
            download_name=filename
        )
        
    except Exception as e:
        print(f"‚ùå Error en exportaci√≥n completa: {e}")
        raise e

def exportar_resumen_csv(fecha_inicio, fecha_fin, formato='csv'):
    """Exportar resumen por usuario"""
    try:
        # Obtener datos
        response = supabase.table('tiempos_descanso').select("*, usuarios(nombre, codigo, turno)")\
            .gte('fecha', fecha_inicio)\
            .lte('fecha', fecha_fin)\
            .execute()
        
        registros = response.data or []
        
        # Procesar estad√≠sticas por usuario
        stats_usuarios = {}
        
        for r in registros:
            try:
                usuario_data = r.get('usuarios', {})
                usuario_nombre = usuario_data.get('nombre', 'Usuario Desconocido')
                
                if usuario_nombre not in stats_usuarios:
                    stats_usuarios[usuario_nombre] = {
                        'codigo': usuario_data.get('codigo', 'N/A'),
                        'turno': usuario_data.get('turno', 'N/A'),
                        'total_descansos': 0,
                        'total_comidas': 0,
                        'tiempo_descansos': 0,
                        'tiempo_comidas': 0,
                        'exceso_descansos': 0,
                        'exceso_comidas': 0,
                        'dias_activos': set()
                    }
                
                tipo = r.get('tipo', 'DESCANSO')
                duracion = r.get('duracion_minutos', 0)
                fecha = r.get('fecha', '')
                
                # Actualizar estad√≠sticas
                if tipo == 'DESCANSO':
                    stats_usuarios[usuario_nombre]['total_descansos'] += 1
                    stats_usuarios[usuario_nombre]['tiempo_descansos'] += duracion
                    if duracion > 20:
                        stats_usuarios[usuario_nombre]['exceso_descansos'] += (duracion - 20)
                else:
                    stats_usuarios[usuario_nombre]['total_comidas'] += 1
                    stats_usuarios[usuario_nombre]['tiempo_comidas'] += duracion
                    if duracion > 40:
                        stats_usuarios[usuario_nombre]['exceso_comidas'] += (duracion - 40)
                
                stats_usuarios[usuario_nombre]['dias_activos'].add(fecha)
                
            except Exception as e_user:
                print(f"‚ö†Ô∏è Error procesando usuario en registro: {e_user}")
                continue
        
        # Crear CSV
        output = io.StringIO()
        writer = csv.writer(output, delimiter=';', quotechar='"')
        
        # Encabezados
        writer.writerow([
            'Nombre',
            'C√≥digo',
            'Turno',
            'D√≠as Activos',
            'Total Descansos',
            'Total Comidas',
            'Tiempo Total Descansos (min)',
            'Tiempo Total Comidas (min)',
            'Tiempo Total (horas)',
            'Promedio Descanso (min)',
            'Promedio Comida (min)',
            'Exceso Descansos (min)',
            'Exceso Comidas (min)',
            'Exceso Total (min)',
            'Eficiencia (%)',
            'Estado General'
        ])
        
        # Datos resumidos
        for nombre, stats in stats_usuarios.items():
            try:
                # Convertir set a conteo
                dias_activos = len(stats['dias_activos'])
                
                # Calcular promedios
                promedio_descanso = round(stats['tiempo_descansos'] / stats['total_descansos'], 1) if stats['total_descansos'] > 0 else 0
                promedio_comida = round(stats['tiempo_comidas'] / stats['total_comidas'], 1) if stats['total_comidas'] > 0 else 0
                
                # Tiempo total
                tiempo_total_min = stats['tiempo_descansos'] + stats['tiempo_comidas']
                tiempo_total_horas = round(tiempo_total_min / 60, 2)
                
                # Exceso total
                exceso_total = stats['exceso_descansos'] + stats['exceso_comidas']
                
                # Eficiencia (menos exceso = m√°s eficiente)
                tiempo_esperado = (stats['total_descansos'] * 20) + (stats['total_comidas'] * 40)
                eficiencia = round((tiempo_esperado / tiempo_total_min * 100), 1) if tiempo_total_min > 0 else 100
                
                # Estado general
                if exceso_total > 120:  # M√°s de 2 horas de exceso
                    estado = 'CR√çTICO'
                elif exceso_total > 60:  # M√°s de 1 hora de exceso
                    estado = 'ALTO EXCESO'
                elif exceso_total > 30:  # M√°s de 30 min de exceso
                    estado = 'MODERADO EXCESO'
                elif exceso_total > 0:
                    estado = 'LEVE EXCESO'
                else:
                    estado = '√ìPTIMO'
                
                writer.writerow([
                    nombre,
                    stats['codigo'],
                    stats['turno'],
                    dias_activos,
                    stats['total_descansos'],
                    stats['total_comidas'],
                    stats['tiempo_descansos'],
                    stats['tiempo_comidas'],
                    tiempo_total_horas,
                    promedio_descanso,
                    promedio_comida,
                    stats['exceso_descansos'],
                    stats['exceso_comidas'],
                    exceso_total,
                    eficiencia,
                    estado
                ])
                
            except Exception as e_summary:
                print(f"‚ö†Ô∏è Error creando resumen para {nombre}: {e_summary}")
                continue
        
        # Preparar respuesta
        output.seek(0)
        filename = f'resumen_usuarios_{fecha_inicio}_{fecha_fin}.csv'
        
        return send_file(
            io.BytesIO(output.getvalue().encode('utf-8-sig')),
            mimetype='text/csv; charset=utf-8',
            as_attachment=True,
            download_name=filename
        )
        
    except Exception as e:
        print(f"‚ùå Error en exportaci√≥n resumen: {e}")
        raise e

def exportar_estadisticas_csv(fecha_inicio, fecha_fin, formato='csv'):
    """Exportar estad√≠sticas generales del per√≠odo"""
    try:
        # Obtener datos
        response = supabase.table('tiempos_descanso').select("*, usuarios(nombre, codigo, turno)")\
            .gte('fecha', fecha_inicio)\
            .lte('fecha', fecha_fin)\
            .execute()
        
        registros = response.data or []
        
        # Crear CSV
        output = io.StringIO()
        writer = csv.writer(output, delimiter=';', quotechar='"')
        
        # Estad√≠sticas generales
        total_registros = len(registros)
        total_descansos = len([r for r in registros if r.get('tipo') == 'DESCANSO'])
        total_comidas = len([r for r in registros if r.get('tipo') == 'COMIDA'])
        
        tiempo_total_descansos = sum(r.get('duracion_minutos', 0) for r in registros if r.get('tipo') == 'DESCANSO')
        tiempo_total_comidas = sum(r.get('duracion_minutos', 0) for r in registros if r.get('tipo') == 'COMIDA')
        
        # Escribir estad√≠sticas generales
        writer.writerow(['ESTAD√çSTICAS GENERALES'])
        writer.writerow(['Per√≠odo', f'{fecha_inicio} a {fecha_fin}'])
        writer.writerow(['Fecha de exportaci√≥n', datetime.now().strftime('%d/%m/%Y %H:%M:%S')])
        writer.writerow([])
        
        writer.writerow(['RESUMEN GENERAL'])
        writer.writerow(['Total de registros', total_registros])
        writer.writerow(['Total descansos', total_descansos])
        writer.writerow(['Total comidas', total_comidas])
        writer.writerow(['Tiempo total descansos (min)', tiempo_total_descansos])
        writer.writerow(['Tiempo total comidas (min)', tiempo_total_comidas])
        writer.writerow(['Tiempo total (horas)', round((tiempo_total_descansos + tiempo_total_comidas) / 60, 2)])
        writer.writerow([])
        
        # Promedios
        writer.writerow(['PROMEDIOS'])
        writer.writerow(['Promedio descanso (min)', round(tiempo_total_descansos / total_descansos, 1) if total_descansos > 0 else 0])
        writer.writerow(['Promedio comida (min)', round(tiempo_total_comidas / total_comidas, 1) if total_comidas > 0 else 0])
        writer.writerow([])
        
        # Estad√≠sticas por d√≠a
        writer.writerow(['ESTAD√çSTICAS POR D√çA'])
        writer.writerow(['Fecha', 'D√≠a', 'Descansos', 'Comidas', 'Total', 'Usuarios √önicos'])
        
        # Agrupar por fecha
        stats_por_dia = {}
        for r in registros:
            try:
                fecha = r.get('fecha', '')
                if fecha not in stats_por_dia:
                    stats_por_dia[fecha] = {
                        'descansos': 0,
                        'comidas': 0,
                        'usuarios': set()
                    }
                
                tipo = r.get('tipo', 'DESCANSO')
                usuario_data = r.get('usuarios', {})
                usuario_nombre = usuario_data.get('nombre', 'Desconocido')
                
                if tipo == 'DESCANSO':
                    stats_por_dia[fecha]['descansos'] += 1
                else:
                    stats_por_dia[fecha]['comidas'] += 1
                
                stats_por_dia[fecha]['usuarios'].add(usuario_nombre)
                
            except Exception as e_day:
                print(f"‚ö†Ô∏è Error procesando d√≠a: {e_day}")
                continue
        
        for fecha in sorted(stats_por_dia.keys()):
            try:
                fecha_obj = datetime.fromisoformat(fecha)
                stats = stats_por_dia[fecha]
                
                writer.writerow([
                    fecha_obj.strftime('%d/%m/%Y'),
                    fecha_obj.strftime('%A').capitalize(),
                    stats['descansos'],
                    stats['comidas'],
                    stats['descansos'] + stats['comidas'],
                    len(stats['usuarios'])
                ])
                
            except Exception as e_day_write:
                print(f"‚ö†Ô∏è Error escribiendo d√≠a {fecha}: {e_day_write}")
                continue
        
        # Preparar respuesta
        output.seek(0)
        filename = f'estadisticas_{fecha_inicio}_{fecha_fin}.csv'
        
        return send_file(
            io.BytesIO(output.getvalue().encode('utf-8-sig')),
            mimetype='text/csv; charset=utf-8',
            as_attachment=True,
            download_name=filename
        )
        
    except Exception as e:
        print(f"‚ùå Error en exportaci√≥n estad√≠sticas: {e}")
        raise e

# Middleware para verificar sesi√≥n activa
@app.before_request
def check_session():
    if 'admin_id' in session:
        # Verificar tiempo de inactividad
        if 'last_activity' in session:
            last_activity = datetime.fromisoformat(session['last_activity'])
            if datetime.now() - last_activity > timedelta(minutes=30):
                session.clear()
                return redirect(url_for('login'))
        
        # Actualizar √∫ltima actividad
        session['last_activity'] = datetime.now().isoformat()

# Manejo de errores
@app.errorhandler(404)
def not_found(e):
    return render_template('error.html', error='P√°gina no encontrada'), 404

@app.errorhandler(500)
def server_error(e):
    return render_template('error.html', error='Error interno del servidor'), 500

# Ruta simple para ver usuarios en descanso
@app.route('/ver_descansos')
def ver_descansos():
    """Ver usuarios en descanso en formato simple"""
    try:
        # Obtener descansos activos
        descansos_response = supabase.table('descansos').select("*").execute()
        
        html = "<h1>üîç Diagn√≥stico de Usuarios en Descanso</h1>"
        html += f"<p><strong>Fecha/Hora:</strong> {datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S')}</p>"
        html += f"<p><strong>Descansos activos en BD:</strong> {len(descansos_response.data)}</p>"
        
        if descansos_response.data:
            html += "<h2>üìã Descansos Activos:</h2><ul>"
            
            for d in descansos_response.data:
                html += f"<li><strong>ID:</strong> {d['id']}<br>"
                html += f"<strong>Usuario ID:</strong> {d['usuario_id']}<br>"
                html += f"<strong>Inicio:</strong> {d['inicio']}<br>"
                
                # Buscar informaci√≥n del usuario
                user_response = supabase.table('usuarios').select("nombre, codigo").eq('id', d['usuario_id']).execute()
                
                if user_response.data:
                    usuario = user_response.data[0]
                    html += f"<strong>Usuario:</strong> {usuario['nombre']} ({usuario['codigo']})<br>"
                    
                    # Calcular tiempo
                    try:
                        inicio = datetime.fromisoformat(d['inicio'].replace('Z', '+00:00'))
                        ahora = get_current_time()
                        tiempo_transcurrido = int((ahora - inicio).total_seconds() / 60)
                        
                        html += f"<strong>Tiempo transcurrido:</strong> {tiempo_transcurrido} minutos<br>"
                        html += f"<strong>Tipo probable:</strong> {'COMIDA' if tiempo_transcurrido >= 20 else 'DESCANSO'}<br>"
                        
                    except Exception as e:
                        html += f"<strong>Error calculando tiempo:</strong> {e}<br>"
                else:
                    html += f"<strong>‚ö†Ô∏è Usuario no encontrado para ID {d['usuario_id']}</strong><br>"
                
                html += "</li><br>"
            
            html += "</ul>"
        else:
            html += "<p>‚ùå No hay descansos activos</p>"
        
        # A√±adir enlaces √∫tiles
        html += "<hr><h2>üîß Enlaces de Diagn√≥stico:</h2>"
        html += "<ul>"
        html += "<li><a href='/debug_descansos'>Diagn√≥stico JSON completo</a></li>"
        html += "<li><a href='/status'>Estado de conexi√≥n</a></li>"
        html += "<li><a href='/'>Volver a la aplicaci√≥n principal</a></li>"
        html += "</ul>"
        
        return html
        
    except Exception as e:
        return f"<h1>‚ùå Error</h1><p>{str(e)}</p><pre>{traceback.format_exc()}</pre>"

# Ruta para diagnosticar usuarios en descanso
@app.route('/debug_descansos')
def debug_descansos():
    """Diagnosticar por qu√© no se muestran los usuarios en descanso"""
    try:
        resultado = []
        resultado.append("=== DIAGN√ìSTICO DE USUARIOS EN DESCANSO ===")
        
        # 1. Verificar tabla descansos
        resultado.append("\n1Ô∏è‚É£ CONSULTANDO TABLA DESCANSOS")
        descansos_response = supabase.table('descansos').select("*").execute()
        resultado.append(f"‚úì Descansos activos encontrados: {len(descansos_response.data)}")
        
        if descansos_response.data:
            resultado.append("üìã Lista detallada de descansos:")
            for i, d in enumerate(descansos_response.data):
                resultado.append(f"   {i+1}. ID: {d['id']}")
                resultado.append(f"      Usuario ID: {d['usuario_id']}")
                resultado.append(f"      Inicio: {d['inicio']}")
                resultado.append(f"      Tipo: {d.get('tipo', 'No definido')}")
        else:
            resultado.append("‚ö†Ô∏è No hay descansos activos en la tabla")
        
        # 2. Verificar tabla usuarios
        resultado.append("\n2Ô∏è‚É£ CONSULTANDO TABLA USUARIOS")
        usuarios_response = supabase.table('usuarios').select("*").execute()
        resultado.append(f"‚úì Total usuarios en BD: {len(usuarios_response.data)}")
        
        if usuarios_response.data:
            resultado.append("üë• Primeros 5 usuarios:")
            for i, u in enumerate(usuarios_response.data[:5]):
                resultado.append(f"   {i+1}. ID: {u['id']} - {u['nombre']} (C√≥digo: {u['codigo']})")
        
        # 3. Cruzar datos
        if descansos_response.data and usuarios_response.data:
            resultado.append("\n3Ô∏è‚É£ CRUZANDO DATOS")
            
            usuarios_dict = {u['id']: u for u in usuarios_response.data}
            usuarios_en_descanso_debug = []
            
            for d in descansos_response.data:
                usuario_id = d['usuario_id']
                resultado.append(f"\nüîç Procesando descanso ID {d['id']}:")
                resultado.append(f"   Usuario ID buscado: {usuario_id}")
                
                if usuario_id in usuarios_dict:
                    usuario = usuarios_dict[usuario_id]
                    resultado.append(f"   ‚úÖ Usuario encontrado: {usuario['nombre']} ({usuario['codigo']})")
                    
                    # Calcular tiempo
                    try:
                        inicio = datetime.fromisoformat(d['inicio'].replace('Z', '+00:00'))
                        ahora = get_current_time()
                        tiempo_transcurrido = int((ahora - inicio).total_seconds() / 60)
                        tiempo_maximo = 40 if tiempo_transcurrido >= 20 else 20
                        tiempo_restante = max(0, tiempo_maximo - tiempo_transcurrido)
                        tipo_probable = 'COMIDA' if tiempo_transcurrido >= 20 else 'DESCANSO'
                        
                        resultado.append(f"   ‚è∞ Tiempo transcurrido: {tiempo_transcurrido} min")
                        resultado.append(f"   üìã Tipo: {tipo_probable}")
                        resultado.append(f"   ‚è≥ Tiempo restante: {tiempo_restante} min")
                        
                        usuarios_en_descanso_debug.append({
                            'nombre': usuario['nombre'],
                            'codigo': usuario['codigo'],
                            'tiempo_transcurrido': tiempo_transcurrido,
                            'tiempo_restante': tiempo_restante,
                            'tipo_probable': tipo_probable
                        })
                        resultado.append(f"   ‚úÖ Usuario agregado a lista de descansos")
                        
                    except Exception as e_tiempo:
                        resultado.append(f"   ‚ùå Error calculando tiempo: {e_tiempo}")
                        
                else:
                    resultado.append(f"   ‚ùå PROBLEMA: Usuario ID {usuario_id} no existe en tabla usuarios")
                    resultado.append(f"      Esto indica datos inconsistentes")
            
            resultado.append(f"\nüìä RESUMEN:")
            resultado.append(f"   Descansos en BD: {len(descansos_response.data)}")
            resultado.append(f"   Usuarios procesados exitosamente: {len(usuarios_en_descanso_debug)}")
            resultado.append(f"   Diferencia: {len(descansos_response.data) - len(usuarios_en_descanso_debug)}")
            
            if usuarios_en_descanso_debug:
                resultado.append(f"\nüë• USUARIOS QUE DEBER√çAN APARECER:")
                for u in usuarios_en_descanso_debug:
                    resultado.append(f"   - {u['nombre']} ({u['codigo']}) - {u['tiempo_transcurrido']} min")
            
            return jsonify({
                'diagnostico': resultado,
                'datos': {
                    'descansos_activos': len(descansos_response.data),
                    'usuarios_totales': len(usuarios_response.data),
                    'usuarios_en_descanso': len(usuarios_en_descanso_debug),
                    'descansos_raw': descansos_response.data,
                    'usuarios_procesados': usuarios_en_descanso_debug
                }
            })
        else:
            resultado.append("\n‚ùå No se pueden cruzar datos - faltan descansos o usuarios")
            return jsonify({
                'diagnostico': resultado, 
                'error': 'Datos insuficientes',
                'datos': {
                    'descansos_activos': len(descansos_response.data) if descansos_response.data else 0,
                    'usuarios_totales': len(usuarios_response.data) if usuarios_response.data else 0,
                    'usuarios_en_descanso': 0,
                    'descansos_raw': descansos_response.data if descansos_response.data else [],
                    'usuarios_procesados': []
                }
            })
            
    except Exception as e:
        resultado.append(f"\n‚ùå ERROR: {str(e)}")
        import traceback
        resultado.append(f"Stack trace: {traceback.format_exc()}")
        return jsonify({
            'diagnostico': resultado, 
            'error': str(e),
            'datos': {
                'descansos_activos': 0,
                'usuarios_totales': 0,
                'usuarios_en_descanso': 0,
                'descansos_raw': [],
                'usuarios_procesados': []
            }
        })

# Ruta para simular flujo completo
@app.route('/test_flujo_completo/<codigo>')
def test_flujo_completo(codigo):
    """Simular flujo completo: entrada + salida"""
    try:
        resultado = []
        resultado.append(f"=== TEST FLUJO COMPLETO: {codigo} ===")
        
        # 1. Buscar usuario
        user_response = supabase.table('usuarios').select('*').eq('codigo', codigo.upper()).execute()
        if not user_response.data:
            return jsonify({'error': f'Usuario con c√≥digo {codigo} no encontrado'}), 404
        
        usuario = user_response.data[0]
        resultado.append(f"‚úì Usuario: {usuario['nombre']} (ID: {usuario['id']})")
        
        # 2. Limpiar descansos previos
        clean_response = supabase_admin.table('descansos').delete().eq('usuario_id', usuario['id']).execute()
        resultado.append(f"‚úì Limpieza: {len(clean_response.data) if clean_response.data else 0} descansos eliminados")
        
        # 3. SIMULAR ENTRADA
        resultado.append(f"--- SIMULANDO ENTRADA ---")
        entrada_response = supabase_admin.table('descansos').insert({
            'usuario_id': usuario['id'],
            'inicio': get_current_time().isoformat(),
            'tipo': 'Pendiente'
        }).execute()
        
        if not entrada_response.data:
            return jsonify({'error': 'No se pudo registrar entrada', 'log': resultado}), 500
        
        descanso_id = entrada_response.data[0]['id']
        resultado.append(f"‚úì Entrada registrada (ID: {descanso_id})")
        
        # 4. Simular tiempo
        import time
        time.sleep(3)
        resultado.append(f"‚úì Tiempo simulado (3 segundos)")
        
        # 5. SIMULAR SALIDA
        resultado.append(f"--- SIMULANDO SALIDA ---")
        
        # Buscar el descanso reci√©n creado
        descanso_response = supabase.table('descansos').select('*').eq('id', descanso_id).execute()
        if not descanso_response.data:
            return jsonify({'error': 'Descanso creado no encontrado', 'log': resultado}), 500
        
        descanso_activo = descanso_response.data[0]
        
        # Cerrar usando funci√≥n helper
        success, mensaje, detalle = cerrar_descanso_usuario(usuario['id'], descanso_activo)
        
        resultado.append(f"{'‚úì' if success else '‚úó'} Cierre: {mensaje}")
        
        # 6. Verificaci√≥n final completa
        resultado.append(f"--- VERIFICACI√ìN FINAL ---")
        final_descansos = supabase.table('descansos').select('*').eq('usuario_id', usuario['id']).execute()
        final_tiempos = supabase.table('tiempos_descanso').select('*').eq('usuario_id', usuario['id']).order('id', desc=True).limit(1).execute()
        
        resultado.append(f"‚úì Descansos activos: {len(final_descansos.data)}")
        resultado.append(f"‚úì Registros en historial: {len(final_tiempos.data)}")
        
        if final_tiempos.data:
            ultimo = final_tiempos.data[0]
            resultado.append(f"‚úì √öltimo registro: {ultimo['tipo']} - {ultimo['duracion_minutos']} min")
        
        return jsonify({
            'success': success,
            'usuario': usuario['nombre'],
            'codigo': codigo,
            'operacion_completa': success and len(final_descansos.data) == 0 and len(final_tiempos.data) > 0,
            'detalle': detalle,
            'log': resultado
        })
        
    except Exception as e:
        return jsonify({
            'error': str(e),
            'codigo': codigo,
            'log': resultado if 'resultado' in locals() else []
        }), 500

# Ruta espec√≠fica para probar cierre de descanso por c√≥digo de usuario
@app.route('/test_close_by_code/<codigo>')
def test_close_by_code(codigo):
    """Probar cerrar descanso usando c√≥digo de usuario"""
    try:
        resultado = []
        resultado.append(f"=== TEST CIERRE POR C√ìDIGO: {codigo} ===")
        
        # 1. Buscar usuario
        user_response = supabase.table('usuarios').select('*').eq('codigo', codigo.upper()).execute()
        if not user_response.data:
            return jsonify({'error': f'Usuario con c√≥digo {codigo} no encontrado'}), 404
        
        usuario = user_response.data[0]
        resultado.append(f"‚úì Usuario encontrado: {usuario['nombre']} (ID: {usuario['id']})")
        
        # 2. Buscar descanso activo
        descanso_response = supabase.table('descansos').select('*').eq('usuario_id', usuario['id']).execute()
        
        if not descanso_response.data:
            resultado.append(f"‚ö†Ô∏è Usuario no tiene descanso activo")
            return jsonify({
                'info': 'Usuario sin descanso activo',
                'usuario': usuario['nombre'],
                'log': resultado
            })
        
        descanso_activo = descanso_response.data[0]
        resultado.append(f"‚úì Descanso activo encontrado: ID {descanso_activo['id']}")
        resultado.append(f"   Inicio: {descanso_activo['inicio']}")
        
        # 3. Cerrar descanso usando funci√≥n helper
        success, mensaje, detalle = cerrar_descanso_usuario(usuario['id'], descanso_activo)
        
        resultado.append(f"{'‚úì' if success else '‚úó'} Resultado: {mensaje}")
        if detalle:
            resultado.append(f"   Detalles: {detalle}")
        
        return jsonify({
            'success': success,
            'usuario': usuario['nombre'],
            'codigo': codigo,
            'mensaje': mensaje,
            'detalle': detalle,
            'log': resultado
        })
        
    except Exception as e:
        return jsonify({
            'error': str(e),
            'codigo': codigo,
            'log': resultado if 'resultado' in locals() else []
        }), 500

# Ruta para probar operaciones b√°sicas
@app.route('/test_operation/<int:usuario_id>')
def test_operation(usuario_id):
    """Probar registrar y cerrar un descanso para un usuario espec√≠fico"""
    try:
        resultado = []
        
        # 1. Verificar usuario
        user_response = supabase.table('usuarios').select('*').eq('id', usuario_id).execute()
        if not user_response.data:
            return jsonify({'error': f'Usuario {usuario_id} no encontrado'}), 404
        
        usuario = user_response.data[0]
        resultado.append(f"‚úì Usuario encontrado: {usuario['nombre']}")
        
        # 2. Limpiar descansos previos
        clean_response = supabase_admin.table('descansos').delete().eq('usuario_id', usuario_id).execute()
        resultado.append(f"‚úì Limpieza: {len(clean_response.data) if clean_response.data else 0} descansos eliminados")
        
        # 3. Crear descanso
        crear_response = supabase_admin.table('descansos').insert({
            'usuario_id': usuario_id,
            'inicio': get_current_time().isoformat(),
            'tipo': 'Pendiente'
        }).execute()
        
        if not crear_response.data:
            resultado.append("‚úó Error creando descanso")
            return jsonify({'error': 'No se pudo crear descanso', 'log': resultado}), 500
        
        descanso_id = crear_response.data[0]['id']
        resultado.append(f"‚úì Descanso creado (ID: {descanso_id})")
        
        # 4. Simular tiempo
        import time
        time.sleep(2)
        
        # 5. Cerrar descanso
        descanso = crear_response.data[0]
        inicio = datetime.fromisoformat(descanso['inicio'].replace('Z', '+00:00'))
        fin = get_current_time()
        duracion_minutos = int((fin - inicio).total_seconds() / 60)
        tipo = 'COMIDA' if duracion_minutos >= 30 else 'DESCANSO'
        
        # Insertar tiempo
        tiempo_response = supabase_admin.table('tiempos_descanso').insert({
            'usuario_id': usuario_id,
            'tipo': tipo,
            'fecha': inicio.date().isoformat(),
            'inicio': inicio.time().isoformat(),
            'fin': fin.time().isoformat(),
            'duracion_minutos': duracion_minutos
        }).execute()
        
        if not tiempo_response.data:
            resultado.append("‚úó Error registrando tiempo")
            return jsonify({'error': 'No se pudo registrar tiempo', 'log': resultado}), 500
        
        # Eliminar descanso activo
        delete_response = supabase_admin.table('descansos').delete().eq('id', descanso_id).execute()
        
        resultado.append(f"‚úì Tiempo registrado: {tipo} - {duracion_minutos} min")
        resultado.append(f"‚úì Descanso eliminado: {len(delete_response.data) if delete_response.data else 0}")
        
        return jsonify({
            'success': True,
            'usuario': usuario['nombre'],
            'operacion': f'{tipo} de {duracion_minutos} minutos',
            'log': resultado
        })
        
    except Exception as e:
        return jsonify({
            'error': str(e),
            'log': resultado if 'resultado' in locals() else []
        }), 500

# Ruta de estado de conexi√≥n
@app.route('/status')
def status():
    """Mostrar el estado actual de la conexi√≥n y sistema"""
    try:
        # Probar conexi√≥n actual
        test_users = supabase.table('usuarios').select('*').limit(3).execute()
        test_descansos = supabase.table('descansos').select('*').execute()
        test_tiempos = supabase.table('tiempos_descanso').select('*').limit(3).execute()
        
        status_info = {
            'timestamp': get_current_time().strftime('%Y-%m-%d %H:%M:%S'),
            'conexion': conexion_supabase_status,
            'tablas': {
                'usuarios': len(test_users.data) if test_users.data else 0,
                'descansos_activos': len(test_descansos.data) if test_descansos.data else 0,
                'tiempos_registrados': len(test_tiempos.data) if test_tiempos.data else 0
            },
            'usuarios_muestra': test_users.data if test_users.data else [],
            'descansos_activos_muestra': test_descansos.data if test_descansos.data else []
        }
        
        return jsonify(status_info)
        
    except Exception as e:
        return jsonify({
            'error': str(e),
            'conexion': conexion_supabase_status,
            'timestamp': get_current_time().strftime('%Y-%m-%d %H:%M:%S')
        }), 500

# Ruta de debug (solo para desarrollo)
@app.route('/debug')
def debug():
    if not app.debug:
        return "Debug deshabilitado", 404
    
    debug_info = []
    
    try:
        # Probar conexi√≥n b√°sica
        debug_info.append("=== PRUEBAS DE CONEXI√ìN ===")
        
        # 1. Verificar usuarios
        users_response = supabase.table('usuarios').select("*").execute()
        debug_info.append(f"‚úÖ Usuarios encontrados: {len(users_response.data)}")
        
        # 2. Verificar descansos activos
        breaks_response = supabase.table('descansos').select("*").execute()
        debug_info.append(f"‚úÖ Descansos activos: {len(breaks_response.data)}")
        
        # 3. Verificar tiempos de descanso
        times_response = supabase.table('tiempos_descanso').select("*").execute()
        debug_info.append(f"‚úÖ Registros hist√≥ricos: {len(times_response.data)}")
        
        # 4. Verificar administradores
        admin_response = supabase.table('administradores').select("*").execute()
        debug_info.append(f"‚úÖ Administradores: {len(admin_response.data)}")
        
        # 5. Mostrar estructura de un usuario si existe
        if users_response.data:
            debug_info.append("\n=== ESTRUCTURA USUARIO ===")
            user = users_response.data[0]
            for key, value in user.items():
                debug_info.append(f"{key}: {value}")
        
        # 6. Mostrar estructura de un descanso si existe
        if breaks_response.data:
            debug_info.append("\n=== ESTRUCTURA DESCANSO ===")
            break_item = breaks_response.data[0]
            for key, value in break_item.items():
                debug_info.append(f"{key}: {value}")
                
        debug_info.append("\n=== PRUEBA DE ESCRITURA ===")
        
        # 7. Probar escritura con admin client
        test_response = supabase_admin.table('usuarios').select("*").limit(1).execute()
        debug_info.append(f"‚úÖ Cliente admin funciona: {len(test_response.data)} registros")
        
    except Exception as e:
        debug_info.append(f"‚ùå Error en debug: {str(e)}")
    
    return "<pre>" + "\n".join(debug_info) + "</pre>"

# Ruta para probar cerrar descanso espec√≠fico
@app.route('/debug/close/<descanso_id>')
def debug_close_break(descanso_id):
    if not app.debug:
        return "Debug deshabilitado", 404
    
    debug_info = []
    
    try:
        debug_info.append(f"=== INTENTANDO CERRAR DESCANSO {descanso_id} ===")
        
        # 1. Buscar el descanso
        response = supabase.table('descansos').select("*").eq('id', descanso_id).execute()
        if not response.data:
            debug_info.append("‚ùå Descanso no encontrado")
            return "<pre>" + "\n".join(debug_info) + "</pre>"
        
        descanso = response.data[0]
        debug_info.append(f"‚úÖ Descanso encontrado: {descanso}")
        
        # 2. Buscar el usuario
        user_response = supabase.table('usuarios').select("*").eq('id', descanso['usuario_id']).execute()
        if not user_response.data:
            debug_info.append("‚ùå Usuario no encontrado")
            return "<pre>" + "\n".join(debug_info) + "</pre>"
        
        usuario = user_response.data[0]
        debug_info.append(f"‚úÖ Usuario encontrado: {usuario['nombre']}")
        
        # 3. Calcular duraci√≥n
        inicio = datetime.fromisoformat(descanso['inicio'].replace('Z', '+00:00'))
        fin = get_current_time()
        duracion_minutos = int((fin - inicio).total_seconds() / 60)
        tipo = 'COMIDA' if duracion_minutos >= 30 else 'DESCANSO'
        
        debug_info.append(f"‚è±Ô∏è Duraci√≥n: {duracion_minutos} minutos, Tipo: {tipo}")
        
        # 4. Insertar en tiempos_descanso
        insert_data = {
            'usuario_id': usuario['id'],
            'tipo': tipo,
            'fecha': inicio.date().isoformat(),
            'inicio': inicio.time().isoformat(),
            'fin': fin.time().isoformat(),
            'duracion_minutos': duracion_minutos
        }
        debug_info.append(f"üìù Datos a insertar: {insert_data}")
        
        insert_response = supabase_admin.table('tiempos_descanso').insert(insert_data).execute()
        debug_info.append(f"‚úÖ Inserci√≥n exitosa: {insert_response.data}")
        
        # 5. Eliminar de descansos
        delete_response = supabase_admin.table('descansos').delete().eq('id', descanso_id).execute()
        debug_info.append(f"üóëÔ∏è Eliminaci√≥n exitosa: {delete_response.data}")
        
        debug_info.append("üéâ PROCESO COMPLETADO EXITOSAMENTE")
        
    except Exception as e:
        debug_info.append(f"‚ùå Error: {str(e)}")
        import traceback
        debug_info.append(f"Stack trace: {traceback.format_exc()}")
    
    return "<pre>" + "\n".join(debug_info) + "</pre>"

# Health check para Render
@app.route('/health')
def health_check():
    """Health check endpoint para Render"""
    try:
        # Verificar conexi√≥n a Supabase
        test_response = supabase.table('usuarios').select("id").limit(1).execute()
        return {"status": "healthy", "database": "connected"}, 200
    except Exception as e:
        return {"status": "unhealthy", "error": str(e)}, 500

# Ruta de debug espec√≠fica para reportes
@app.route('/debug_reportes')
def debug_reportes():
    """Diagn√≥stico espec√≠fico para la funci√≥n de reportes"""
    try:
        debug_info = []
        debug_info.append("=== DEBUG REPORTES ===")
        
        # Probar conexi√≥n b√°sica
        debug_info.append("1. Probando conexi√≥n a Supabase...")
        test_response = supabase.table('usuarios').select("id").limit(1).execute()
        debug_info.append(f"‚úÖ Conexi√≥n OK - {len(test_response.data)} usuarios encontrados")
        
        # Probar consulta de tiempos_descanso
        debug_info.append("2. Probando tabla tiempos_descanso...")
        fecha_inicio = (date.today() - timedelta(days=7)).isoformat()
        fecha_fin = date.today().isoformat()
        
        # Consulta b√°sica sin JOIN
        basic_response = supabase.table('tiempos_descanso').select("*").limit(5).execute()
        debug_info.append(f"‚úÖ Consulta b√°sica OK - {len(basic_response.data)} registros")
        
        if basic_response.data:
            debug_info.append("üìã Estructura de registro:")
            sample = basic_response.data[0]
            for key, value in sample.items():
                debug_info.append(f"   {key}: {type(value).__name__} = {value}")
        
        # Probar consulta con JOIN
        debug_info.append("3. Probando consulta con JOIN...")
        try:
            join_response = supabase.table('tiempos_descanso').select("*, usuarios(nombre, codigo)").limit(3).execute()
            debug_info.append(f"‚úÖ JOIN OK - {len(join_response.data)} registros")
            
            if join_response.data:
                debug_info.append("üìã Estructura con JOIN:")
                sample_join = join_response.data[0]
                debug_info.append(f"   usuarios: {sample_join.get('usuarios', 'NO ENCONTRADO')}")
                
        except Exception as e_join:
            debug_info.append(f"‚ùå Error en JOIN: {e_join}")
        
        # Probar consulta con filtros de fecha
        debug_info.append("4. Probando consulta con filtros de fecha...")
        try:
            filtered_response = supabase.table('tiempos_descanso').select("*, usuarios(nombre, codigo)")\
                .gte('fecha', fecha_inicio)\
                .lte('fecha', fecha_fin)\
                .execute()
            debug_info.append(f"‚úÖ Filtros OK - {len(filtered_response.data)} registros en per√≠odo")
            
        except Exception as e_filter:
            debug_info.append(f"‚ùå Error en filtros: {e_filter}")
        
        debug_info.append("5. Verificando estructura de datos...")
        if filtered_response.data:
            for i, record in enumerate(filtered_response.data[:3]):
                debug_info.append(f"   Registro {i+1}:")
                debug_info.append(f"     ID: {record.get('id', 'NO ID')}")
                debug_info.append(f"     Fecha: {record.get('fecha', 'NO FECHA')}")
                debug_info.append(f"     Tipo: {record.get('tipo', 'NO TIPO')}")
                debug_info.append(f"     Duraci√≥n: {record.get('duracion_minutos', 'NO DURACI√ìN')}")
                debug_info.append(f"     Usuario: {record.get('usuarios', 'NO USUARIO')}")
        
        return jsonify({
            'success': True,
            'debug_info': debug_info,
            'sample_data': {
                'basic_count': len(basic_response.data) if basic_response.data else 0,
                'join_count': len(join_response.data) if 'join_response' in locals() and join_response.data else 0,
                'filtered_count': len(filtered_response.data) if 'filtered_response' in locals() and filtered_response.data else 0
            }
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e),
            'error_type': type(e).__name__,
            'debug_info': debug_info if 'debug_info' in locals() else [],
            'traceback': traceback.format_exc()
        })

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)